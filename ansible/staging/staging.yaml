- name: Set variables on localhost
  hosts: localhost
  connection: local
  vars_prompt:
    - name: "r_user"
      prompt: "Enter username"
      private: no
    - name: "r_password"
      prompt: "Enter sudo password"
      private: yes
    - name: "r_github_token"
      prompt: "Enter GitHub token"
      private: yes
    - name: "r_sops_key"
      prompt: "Enter SOPS key"
      private: yes

  tasks:
    - name: Store variables
      ansible.builtin.copy:
        content: |
          ---
          global_user: "{{ r_user }}"
          global_password: "{{ r_password }}"
          global_become_method: sudo
          global_become_password: "{{ r_password }}"
          global_github_token: "{{ r_github_token }}"
          global_sops_key: "{{ r_sops_key }}"
        dest: "./.ansible_vars.yml"
        mode: '0600'

- name: Setup Kubernetes Cluster
  hosts: staging
  become: yes
  vars_files:
    - "./.ansible_vars.yml"
  vars:
    ansible_user: "{{ global_user }}"
    ansible_password: "{{ global_password }}"
    ansible_become_method: "{{ global_become_method }}"
    ansible_become_password: "{{ global_become_password }}"

    ansible_ssh_common_args: '-o StrictHostKeyChecking=accept-new'

  tasks:
    - name: Test connection
      ansible.builtin.ping:

    - name: Run apt update
      ansible.builtin.apt:
        update_cache: yes
        upgrade: yes

    # Required for Longhorn
    - name: Install nfs
      ansible.builtin.apt:
        name: nfs-common
        state: present

    - name: Install k3s requirements
      ansible.builtin.apt:
        update_cache: true
        pkg:
          - policycoreutils
        state: present

    - name: Check if k3s is already installed
      ansible.builtin.shell:
        cmd: 'test -f /usr/local/bin/k3s'
      register: k3s_installed
      failed_when: false

    - name: Download k3s installation script
      ansible.builtin.uri:
        url: 'https://get.k3s.io'
        method: GET
        return_content: yes
        dest: '/tmp/k3s_install.sh'
      when: k3s_installed.rc != 0

    - name: Execute k3s installation script
      ansible.builtin.shell: |
        chmod +x /tmp/k3s_install.sh
        /tmp/k3s_install.sh
      when: k3s_installed.rc != 0

    - name: Ensure k3s service is running
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Copy k3s config
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /tmp/config.yaml
        remote_src: yes
        mode: '0600'

    - name: Replace k3s config ip
      ansible.builtin.replace:
        path: /tmp/config.yaml
        regexp: 'https://127\.0\.0\.1:6443'
        replace: 'https://{{ ansible_host }}:6443'

    - name: Change ownership of k3s config
      ansible.builtin.file:
        path: /tmp/config.yaml
        owner: "{{ global_user }}"
        group: "{{ global_user }}"
        state: file

    - name: Download k3s config
      ansible.builtin.fetch:
        src: /tmp/config.yaml
        dest: ./config.yaml
        flat: yes

- name: Setup FluxCD and SOPS
  hosts: localhost
  vars_files:
    - "./.ansible_vars.yml"
  vars:
    c_github_token: "{{ global_github_token }}"
    c_sops_key: "{{ global_sops_key }}"

    ansible_ssh_common_args: '-o StrictHostKeyChecking=accept-new'

  tasks:
    - name: Check if FluxCD is installable
      ansible.builtin.shell:
        cmd: 'flux check --pre'
      environment:
        KUBECONFIG: "./config.yaml"
      register: flux_check

    - name: Verify FluxCD prerequisites passed
      ansible.builtin.debug:
        msg: "FluxCD prerequisites checks passed!"
      when: "'prerequisites checks passed' in flux_check.stdout"
      failed_when: false

    - name: Install FluxCD operator
      ansible.builtin.shell:
        cmd: 'flux bootstrap github --owner=bjsonnen --repository=homelab --branch=main --path=./clusters/staging --personal'
      environment:
        KUBECONFIG: "./config.yaml"
        GITHUB_TOKEN: "{{ c_github_token }}"

    - name: Add SOPS private key
      ansible.builtin.shell:
        cmd: 'kubectl create secret generic sops-age --namespace=flux-system --from-literal=age.agekey={{ global_sops_key }}'
      environment:
        KUBECONFIG: "./config.yaml"

    - name: Get current working directory
      ansible.builtin.command: pwd
      register: pwd_output

    - name: Recommend to export KUBECONFIG
      ansible.builtin.debug:
        msg: 'Please run: export KUBECONFIG={{ pwd_output.stdout }}/config.yaml'
